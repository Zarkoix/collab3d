{"version":3,"sources":["Cube.js","index.js"],"names":["Cube","props","setCameraPosition","bind","start","stop","animate","this","scene","THREE","background","fog","camera","window","innerWidth","innerHeight","position","set","lookAt","renderer","antialias","setPixelRatio","devicePixelRatio","setSize","controls","OrbitControls","domElement","enableDamping","dampingFactor","screenSpacePanning","minDistance","maxDistance","maxPolarAngle","Math","PI","geometry","material","color","flatShading","i","mesh","x","random","y","z","updateMatrix","matrixAutoUpdate","add","light","mount","appendChild","nextProps","nextState","console","log","param","removeChild","frameId","requestAnimationFrame","cancelAnimationFrame","renderScene","render","ref","Component","MainPage","Container","Row","Col","Button","onClick","md","click","React","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.f8972433.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nclass Cube extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.setCameraPosition = this.setCameraPosition.bind(this);\r\n    this.start = this.start.bind(this);\r\n    this.stop = this.stop.bind(this);\r\n    this.animate = this.animate.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    //Bind Upstream click events\r\n    this.props.setCameraPosition(this.setCameraPosition);\r\n\r\n    //const width = this.mount.clientWidth;\r\n    //const height = this.mount.clientHeight;\r\n\r\n    //Pure ThreeJS code\r\n\r\n    //Scene\r\n    const scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(0xcccccc);\r\n    scene.fog = new THREE.FogExp2(0xcccccc, 0.002);\r\n\r\n    //Camera\r\n    const camera = new THREE.PerspectiveCamera(\r\n      60,\r\n      window.innerWidth / window.innerHeight,\r\n      1,\r\n      1000\r\n    );\r\n    camera.position.set(400, 200, 0);\r\n    camera.lookAt(new THREE.Vector3(0, 0, 0)); // Set look at coordinate like this\r\n\r\n    //Renderer- Generally always use webGL\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setPixelRatio(window.devicePixelRatio);\r\n    renderer.setSize(window.innerWidth * 0.7, window.innerHeight * 0.7);\r\n\r\n    // controls\r\n    const controls = new OrbitControls(camera, renderer.domElement);\r\n\r\n    //controls.addEventListener( 'change', render ); // call this only in static scenes (i.e., if there is no animation loop)\r\n    controls.enableDamping = true; // an animation loop is required when either damping or auto-rotation are enabled\r\n    controls.dampingFactor = 0.05;\r\n    controls.screenSpacePanning = false;\r\n    controls.minDistance = 100;\r\n    controls.maxDistance = 500;\r\n    controls.maxPolarAngle = Math.PI / 2;\r\n\r\n    // world\r\n    const geometry = new THREE.CylinderBufferGeometry(0, 10, 30, 4, 1);\r\n    const material = new THREE.MeshPhongMaterial({\r\n      color: 0xffffff,\r\n      flatShading: true\r\n    });\r\n\r\n    for (var i = 0; i < 500; i++) {\r\n      var mesh = new THREE.Mesh(geometry, material);\r\n      mesh.position.x = Math.random() * 1600 - 800;\r\n      mesh.position.y = 0;\r\n      mesh.position.z = Math.random() * 1600 - 800;\r\n      mesh.updateMatrix();\r\n      mesh.matrixAutoUpdate = false;\r\n      scene.add(mesh);\r\n    }\r\n\r\n    // lights\r\n    var light = new THREE.DirectionalLight(0xffffff);\r\n    light.position.set(1, 1, 1);\r\n    scene.add(light);\r\n    light = new THREE.DirectionalLight(0x002288);\r\n    light.position.set(-1, -1, -1);\r\n    scene.add(light);\r\n    light = new THREE.AmbientLight(0x222222);\r\n    scene.add(light);\r\n\r\n    //Bind ThreeJs items to this for use outside componentDidMount\r\n    this.scene = scene;\r\n    this.camera = camera;\r\n    this.renderer = renderer;\r\n    this.material = material;\r\n    this.geometry = geometry;\r\n\r\n    //Mount\r\n    this.mount.appendChild(this.renderer.domElement);\r\n\r\n    //Start Animating\r\n    this.start();\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    console.log(\"Update Time\");\r\n    return false;\r\n  }\r\n\r\n  setCameraPosition(param) {\r\n    console.log(\"setting position to:\" + param);\r\n    this.camera.position.set(...param);\r\n  }\r\n  componentWillUnmount() {\r\n    this.stop();\r\n    this.mount.removeChild(this.renderer.domElement);\r\n  }\r\n\r\n  start() {\r\n    if (!this.frameId) {\r\n      this.frameId = requestAnimationFrame(this.animate);\r\n    }\r\n  }\r\n\r\n  stop() {\r\n    cancelAnimationFrame(this.frameId);\r\n  }\r\n\r\n  animate() {\r\n    this.renderScene();\r\n    this.frameId = window.requestAnimationFrame(this.animate);\r\n  }\r\n\r\n  renderScene() {\r\n    this.renderer.render(this.scene, this.camera);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        ref={mount => {\r\n          this.mount = mount;\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Cube;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Cube from \"./Cube\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport { Container, Button } from \"react-bootstrap\";\nimport { Row } from \"react-bootstrap\";\nimport { Col } from \"react-bootstrap\";\n\nclass MainPage extends React.Component {\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <Button onClick={() => this.setCameraPosition([400, 100, 0])}>\n              Position 1\n            </Button>\n            <Button onClick={() => this.setCameraPosition([400, 300, 0])}>\n              Position 2\n            </Button>\n            <Button onClick={() => this.setCameraPosition([400, 0, 0])}>\n              Position 3\n            </Button>\n          </Col>\n          <Col md={10}>\n            <Cube\n              setCameraPosition={click => (this.setCameraPosition = click)}\n            />\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nReactDOM.render(<MainPage />, document.getElementById(\"root\"));\n"],"sourceRoot":""}